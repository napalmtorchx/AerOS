Register(32-bit): 
- R0-R7(General purpose)
- BP(Base pointer)
- SP(Stack pointer)
- IP(Instruction pointer)
- FL(Flags)

Memory:
- Direct access to physical memory
- Memory region must be mapped to the VM, otherwise access violation

Instruction Set:
- op   name     bytes   arguments		description										usage
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- 0x00 NOP	1	(null)			No operation
- 0x01 ADD	6	(reg, int)		Add immediate 32-bit value to register							R0 += v
- 0x02 ADDR     3	(reg, reg)		Add 2 register values									R0 += R1
- 0x03 SUB	6	(reg, int)		Subtract immediate 32-bit value from register						R0 += v
- 0x04 SUBR     3	(reg, reg)		Subtract 2 register values								R0 -= R1
- 0x05 MUL	6	(reg, int)		Multiply immediate 32-bit value by register						R0 *= v
- 0x06 MULR     3	(reg, reg)		Multiply 2 register values								R0 *= R1
- 0x07 DIV	6	(reg, int)		Divide register by 32-bit immediate value						R0 /= v
- 0x08 DIVR     3	(reg, reg)		Divide 2 register values								R0 /= R1

- 0x09 OR	6	(reg, int)		Bitwise OR 32-bit immediate value to register						R0 |= v
- 0x0A ORR	3	(reg, reg)		Bitwise OR register values								R0 |= R1
- 0x0B XOR	6	(reg, int)		Bitwise XOR 32-bit immediate value to register						R0 ^= v
- 0x0C XORR	3	(reg, reg)		Bitwise XOR register values								R0 ^= R1
- 0x0D AND	6	(reg, int)		Bitwise AND 32-bit immediate value to register						R0 &= v
- 0x0E ANDR	3	(reg, reg)		Bitwise AND register values								R0 &= R1
- 0x0F NOT	2	(reg)			Bitwise NOT register value								R0 = ~R0

- 0x10 SHL	3	(reg, byte)		Bitwise shift left register by 8-bit immediate value					R0 << v
- 0x11 SHLR	3	(reg, reg)		Bitwise shift left register by another register casted to 8-bit value			R0 << (byte)R1
- 0x12 SHR	3	(reg, byte)		Bitwise shift right register by 8-bit immediate value					R0 >> v
- 0x13 SHRR	3	(reg, reg)		Bitwise shift right register by another register casted to 8-bit value			R0 >> (byte)R1

- 0x14 JMP	5	(int)			Jump to immediate address value								goto v
- 0x15 JMPR	2	(reg)			Jump to address value stored in register						goto R0
- 0x16 CALL	5	(int)			Call subroutine at immediate address value						v();
- 0x17 CALLR	2	(reg)			Call subroutine stored in register							R0();
- 0x18 RET	1	(null)			Return from subroutine(pop address from stack and goto it)				return;	

- 0x19 PUSH	5	(int)			Push immediate 32-bit value to the stack						int var = v
- 0x1A PUSHR	2	(reg)			Push value in register to the stack							int var = R0
- 0x1B POP	2	(reg)			Pop value off the stack into register							var = null

- 0x1C SE	6	(reg, int)		Skip next instruction if register is equal to immediate 32-bit value			if (!(R0 == v)) { }
- 0x1D SER	3	(reg, reg)		Skip next instruction if register is equal to another register				if (!(R0 == R1)) { }
- 0x1E SNE	6	(reg, int)		Skip next instruction if register is NOT equal to immediate 32-bit value		if (!(R0 != v)) { }
- 0x1F SNER	3	(reg, reg)		Skip next instruction if register is NOT equal to another register			if (!(R0 != R1)) { }
- 0x20 SGT	6	(reg, int)		Skip next instruction if register is greater than immediate 32-bit value		if (!(R0 > v) { }
- 0x21 SGTR	3	(reg, reg) 		Skip next instruction if register is greater than another register			if (!(R0 > R1) { }
- 0x22 SLT	6	(reg, int)		Skip next instruction if register is less than immediate 32-bit value			if (!(R0 < v)) { }
- 0x23 SLTR	3	(reg, reg) 		Skip next instruction if register is less than another register				if (!(R0 < R1)) { }
- 0x24 SC	2	(byte)			Skip next instruction if carry flag is equal to immediate boolean 8-bit value		if (!(flags,carry == v)) { }
- 0x25 SN	2	(byte)			Skip next instruction if negative flag is equal to immediate boolean 8-bit value	if (!(flags.negative == v)) { }
- 0x26 SZ	2	(byte)			Skip next instruction if zero flag is equal to immediate boolean 8-bit value		if (!(flags.zero == v)) { }

- 0x27 LD	6	(reg, int)		Load immediate 32-bit value into register						R0 = v
- 0x28 LDR	3	(reg, reg)		Copy value from 1 register to another							R0 = R1
- 0x29 LDB	6	(reg, int)		Load 8-bit value at immediate address into register					R0 = (byte)*v
- 0x2A LDW	6	(reg, int)		Load 16-bit value at immediate address into register					R0 = (short)*v
- 0x2B LDL	6	(reg, int)		Load 32-bit value at immediate address into register					R0 = *v
- 0x2C LDRB	3	(reg, reg)		Load 8-bit value at address from register into register					R0 = (byte)*R1
- 0x2D LDRW	3	(reg, reg)		Load 16-bit value at address from register into register				R0 = (short)*R1
- 0x2E LDRL	3	(reg, reg)		Load 32-bit value at address from register into register				R0 = *R1

- 0x2F WRB	6	(int, byte)		Write immediate 8-bit value to immediate address					(byte*)*ptr = (byte)v
- 0x30 WRW	7	(int, short)		Write immediate 16-bit value to immediate address					(short*)*ptr = (short)v
- 0x31 WRL	9	(int, int)		Write immediate 32-bit value to immediate address					*ptr = v
- 0x32 WRB	3	(reg, byte)		Write immediate 8-bit value to address in register					(byte*)*R0 = (byte)v
- 0x33 WRW	4	(reg, short)		Write immediate 16-bit value to address in register					(short*)*R0 = (short)v
- 0x34 WRL	6	(reg, int)		Write immediate 32-bit value to address in register					*R0 = v

- 0x35 STB	6	(int, reg)		Write value in register(8-bit cast) to immediate address				(byte*)*ptr = (byte)R0
- 0x36 STW	6	(int, reg)		Write value in register(16-bit cast) to immediate address				(short*)*ptr = (short)R0
- 0x37 STL	6	(int, reg)		Write value in register(32-bit cast) to immediate address				*ptr = R0
- 0x38 STRB	3	(reg, reg)		Write value in register(8-bit cast) to address in register				(byte*)*ptr = (byte*)*R0
- 0x39 STRW	3	(reg, reg)		Write value in register(16-bit cast) to address in register				(short*)*ptr = (short*)*R0
- 0x3A STRL	3	(reg, reg)		Write value in register(32-bit cast) to address in register				*ptr = *R0

- 0x3B SYSCALL  5	(int)			Perform system call specified by immediate value					syscall(v);
- 0x3C SYSCALLR 2	(reg)			Perform system call specified in register						syscall(R0);


FPU-Extended Instruction Set:
- op   name     bytes   arguments		description										usage
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- 0x60 FPUSHS	5	(float)			Pushes a single precision value onto the FPU's stack					float var = .1f;
- 0x61 FPUSHD	9	(double)		Pushes a double precision value onto the FPU's stack					double var = .1f;
- 0x62 FPUSHR	11	(real)			Pushes a real precision value onto the FPU's stack					real var = .1f;

- 0x63 FPOPS	5	(int)			Pops the top value from the FPU stack into the given memory address (single precision)	float var = st(0);
- 0x64 FPOPD	5	(int)			Pops the top value from the FPU stack into the given memory address (double precision)	double var = st(0);
- 0x65 FPOPR	5	(int)			Pops the top value from the FPU stack into the given memory address (real precision)	real var = st(0);
- 0x66 FPOPB	5	(int)			Pops the top value from the FPU stack into the given memory address (rounded to byte)	(byte)st(0);
- 0x67 FPOPW	5	(int)			Pops the top value from the FPU stack into the given memory address (rounded to word)	(short)st(0);
- 0x68 FPOPL	5	(int)			Pops the top value from the FPU stack into the given memory address (rounded to int)	(int)st(0);

- 0x69 FADDS	5	(int)			Adds the number at the given address with the top value from the FPU stack		st(0) + (float)*v;
- 0x6A FADDD	5	(int)			Adds the number at the given address with the top value from the FPU stack		st(0) + (double)*v;
- 0x6B FADDR	5	(int)			Adds the number at the given address with the top value from the FPU stack		st(0) + (real)*v;
- 0x6C FADDB	5	(int)			Adds the number at the given address with the top value from the FPU stack		st(0) + (byte)*v;
- 0x6D FADDW	5	(int)			Adds the number at the given address with the top value from the FPU stack		st(0) + (short)*v;
- 0x6E FADDL	5	(int)			Adds the number at the given address with the top value from the FPU stack		st(0) + (int)*v;

- 0x6F FSUBS	5	(int)			Subtracts the number at the given address to the top value from the FPU stack		st(0) - (float)*v;
- 0x70 FSUBD	5	(int)			Subtracts the number at the given address to the top value from the FPU stack		st(0) - (double)*v;
- 0x71 FSUBR	5	(int)			Subtracts the number at the given address to the top value from the FPU stack		st(0) - (real)*v;
- 0x72 FSUBB	5	(int)			Subtracts the number at the given address to the top value from the FPU stack		st(0) - (byte)*v;
- 0x73 FSUBW	5	(int)			Subtracts the number at the given address to the top value from the FPU stack		st(0) - (short)*v;
- 0x74 FSUBL	5	(int)			Subtracts the number at the given address to the top value from the FPU stack		st(0) - (int)*v;

- 0x75 FMULS	5	(int)			Multiplies the number at the given address with the top value from the FPU stack	st(0) * (float)*v;
- 0x76 FMULD	5	(int)			Multiplies the number at the given address with the top value from the FPU stack	st(0) * (double)*v;
- 0x77 FMULR	5	(int)			Multiplies the number at the given address with the top value from the FPU stack	st(0) * (real)*v;
- 0x78 FMULB	5	(int)			Multiplies the number at the given address with the top value from the FPU stack	st(0) * (byte)*v;
- 0x79 FMULW	5	(int)			Multiplies the number at the given address with the top value from the FPU stack	st(0) * (short)*v;
- 0x7A FMULL	5	(int)			Multiplies the number at the given address with the top value from the FPU stack	st(0) * (int)*v;

- 0x7B FDIVS	5	(int)			Divides the number at the given address with the top value from the FPU stack		st(0) / (float)*v;
- 0x7C FDIVD	5	(int)			Divides the number at the given address with the top value from the FPU stack		st(0) / (double)*v;
- 0x7D FDIVR	5	(int)			Divides the number at the given address with the top value from the FPU stack		st(0) / (real)*v;
- 0x7E FDIVB	5	(int)			Divides the number at the given address with the top value from the FPU stack		st(0) / (byte)*v;
- 0x7F FDIVW	5	(int)			Divides the number at the given address with the top value from the FPU stack		st(0) / (short)*v;
- 0x80 FDIVL	5	(int)			Divides the number at the given address with the top value from the FPU stack		st(0) / (int)*v;

- 0x81 FADDRB	2	(reg)			Adds the number at the given register with the top value from the FPU stack		st(0) + (byte)*v;
- 0x82 FADDRW	2	(reg)			Adds the number at the given register with the top value from the FPU stack		st(0) + (short)*v;
- 0x83 FADDRL	2	(reg)			Adds the number at the given register with the top value from the FPU stack		st(0) + (int)*v;

- 0x84 FSUBRB	2	(reg)			Subtracts the number at the given register to the top value from the FPU stack		st(0) - (byte)*v;
- 0x85 FSUBRW	2	(reg)			Subtracts the number at the given register to the top value from the FPU stack		st(0) - (short)*v;
- 0x86 FSUBRL	2	(reg)			Subtracts the number at the given register to the top value from the FPU stack		st(0) - (int)*v;

- 0x87 FMULRB	2	(reg)			Multiplies the number at the given register with the top value from the FPU stack	st(0) * (byte)*v;
- 0x88 FMULRW	2	(reg)			Multiplies the number at the given register with the top value from the FPU stack	st(0) * (short)*v;
- 0x89 FMULRL	2	(reg)			Multiplies the number at the given register with the top value from the FPU stack	st(0) * (int)*v;

- 0x8A FDIVRB	2	(reg)			Divides the number at the given register with the top value from the FPU stack		st(0) / (byte)*v;
- 0x8B FDIVRW	2	(reg)			Divides the number at the given register with the top value from the FPU stack		st(0) / (short)*v;
- 0x8C FDIVRL	2	(reg)			Divides the number at the given register with the top value from the FPU stack		st(0) / (int)*v;

- 0x8D FWAIT	1	(null)			Waits for any current FPU action							float result = fwait(.1f/.2f);

- 0x8E FROUND	1	(null)			Rounds the number at the top of FPU's stack to the nearest integral number		round(st(0));
- 0x8F FSQRT	1	(null)			Calculates the square root of the number at the top of FPU's stack			sqrt(st(0));



