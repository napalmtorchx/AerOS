Register(32-bit): 
- R0-R7(General purpose)
- BP(Base pointer)
- SP(Stack pointer)
- IP(Instruction pointer)
- FL(Flags)

Memory:
- Direct access to physical memory
- Memory region must be mapped to the VM, otherwise access violation

Instruction Set:
- op   name     bytes   arguments		description										usage
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- 0x00 NOP	1	(null)			No operation
- 0x01 ADD	6	(reg, int)		Add immediate 32-bit value to register							R0 += v
- 0x02 ADDR     3	(reg, reg)		Add 2 register values									R0 += R1
- 0x03 SUB	6	(reg, int)		Subtract immediate 32-bit value from register						R0 += v
- 0x04 SUBR     3	(reg, reg)		Subtract 2 register values								R0 -= R1
- 0x05 MUL	6	(reg, int)		Multiply immediate 32-bit value by register						R0 *= v
- 0x06 MULR     3	(reg, reg)		Multiply 2 register values								R0 *= R1
- 0x07 DIV	6	(reg, int)		Divide register by 32-bit immediate value						R0 /= v
- 0x08 DIVR     3	(reg, reg)		Divide 2 register values								R0 /= R1

- 0x09 OR	6	(reg, int)		Bitwise OR 32-bit immediate value to register						R0 |= v
- 0x0A ORR	3	(reg, reg)		Bitwise OR register values								R0 |= R1
- 0x0B XOR	6	(reg, int)		Bitwise XOR 32-bit immediate value to register						R0 ^= v
- 0x0C XORR	3	(reg, reg)		Bitwise XOR register values								R0 ^= R1
- 0x0D AND	6	(reg, int)		Bitwise AND 32-bit immediate value to register						R0 &= v
- 0x0E ANDR	3	(reg, reg)		Bitwise AND register values								R0 &= R1
- 0x0F NOT	2	(reg)			Bitwise NOT register value								R0 = ~R0

- 0x10 SHL	3	(reg, byte)		Bitwise shift left register by 8-bit immediate value					R0 << v
- 0x11 SHLR	3	(reg, reg)		Bitwise shift left register by another register casted to 8-bit value			R0 << (byte)R1
- 0x12 SHR	3	(reg, byte)		Bitwise shift right register by 8-bit immediate value					R0 >> v
- 0x13 SHRR	3	(reg, reg)		Bitwise shift right register by another register casted to 8-bit value			R0 >> (byte)R1

- 0x14 JMP	5	(int)			Jump to immediate address value								goto v
- 0x15 JMPR	2	(reg)			Jump to address value stored in register						goto R0
- 0x16 CALL	5	(int)			Call subroutine at immediate address value						v();
- 0x17 CALLR	2	(reg)			Call subroutine stored in register							R0();
- 0x18 RET	5	(null)			Return from subroutine(pop address from stack and goto it)				return;	

- 0x19 PUSH	5	(int)			Push immediate 32-bit value to the stack						int var = v
- 0x1A PUSHR	2	(reg)			Push value in register to the stack							int var = R0
- 0x1B POP	2	(reg)			Pop value off the stack into register							var = null

- 0x1C SE	6	(reg, int)		Skip next instruction if register is equal to immediate 32-bit value			if (!(R0 == v)) { }
- 0x1D SER	3	(reg, reg)		Skip next instruction if register is equal to another register				if (!(R0 == R1)) { }
- 0x1E SNE	6	(reg, int)		Skip next instruction if register is NOT equal to immediate 32-bit value		if (!(R0 != v)) { }
- 0x1F SNER	3	(reg, reg)		Skip next instruction if register is NOT equal to another register			if (!(R0 != R1)) { }
- 0x20 SGT	6	(reg, int)		Skip next instruction if register is greater than immediate 32-bit value		if (!(R0 > v) { }
- 0x21 SGTR	3	(reg, reg) 		Skip next instruction if register is greater than another register			if (!(R0 > R1) { }
- 0x22 SLT	6	(reg, int)		Skip next instruction if register is less than immediate 32-bit value			if (!(R0 < v)) { }
- 0x23 SLTR	3	(reg, reg) 		Skip next instruction if register is less than another register				if (!(R0 < R1)) { }
- 0x24 SC	2	(byte)			Skip next instruction if carry flag is equal to immediate boolean 8-bit value		if (!(flags,carry == v)) { }
- 0x25 SN	2	(byte)			Skip next instruction if negative flag is equal to immediate boolean 8-bit value	if (!(flags.negative == v)) { }
- 0x26 SZ	2	(byte)			Skip next instruction if zero flag is equal to immediate boolean 8-bit value		if (!(flags.zero == v)) { }

- 0x27 LD	6	(reg, int)		Load immediate 32-bit value into register						R0 = v
- 0x28 LDR	3	(reg, reg)		Copy value from 1 register to another							R0 = R1
- 0x29 LDB	6	(reg, int)		Load 8-bit value at immediate address into register					R0 = (byte)*v
- 0x2A LDW	6	(reg, int)		Load 16-bit value at immediate address into register					R0 = (short)*v
- 0x2B LDL	6	(reg, int)		Load 32-bit value at immediate address into register					R0 = *v
- 0x2C LDRB	3	(reg, reg)		Load 8-bit value at address from register into register					R0 = (byte)*R1
- 0x2D LDRW	3	(reg, reg)		Load 16-bit value at address from register into register				R0 = (short)*R1
- 0x2E LDRL	3	(reg, reg)		Load 32-bit value at address from register into register				R0 = *R1

- 0x2F WRB	6	(int, byte)		Write immediate 8-bit value to immediate address					(byte*)*ptr = (byte)v
- 0x30 WRW	7	(int, short)		Write immediate 16-bit value to immediate address					(short*)*ptr = (short)v
- 0x31 WRL	9	(int, int)		Write immediate 32-bit value to immediate address					*ptr = v
- 0x32 WRRB	3	(reg, byte)		Write immediate 8-bit value to address in register					(byte*)*R0 = (byte)v
- 0x33 WRRW	4	(reg, short)		Write immediate 16-bit value to address in register					(short*)*R0 = (short)v
- 0x34 WRRL	6	(reg, int)		Write immediate 32-bit value to address in register					*R0 = v

- 0x35 STB	6	(int, reg)		Write value in register(8-bit cast) to immediate address				(byte*)*ptr = (byte)R0
- 0x36 STW	6	(int, reg)		Write value in register(16-bit cast) to immediate address				(short*)*ptr = (short)R0
- 0x37 STL	6	(int, reg)		Write value in register(32-bit cast) to immediate address				*ptr = R0
- 0x38 STRB	3	(reg, reg)		Write value in register(8-bit cast) to address in register				(byte*)*ptr = (byte*)*R0
- 0x39 STRW	3	(reg, reg)		Write value in register(16-bit cast) to address in register				(short*)*ptr = (short*)*R0
- 0x3A STRL	3	(reg, reg)		Write value in register(32-bit cast) to address in register				*ptr = *R0

- 0x3B SYSCALL  5	(int)			Perform system call specified by immediate value					syscall(v);
- 0x3C SYSCALLR 2	(reg)			Perform system call specified in register						syscall(R0);